---
- hosts: localhost
  collections:
  - community.general
  become: true
  tasks:
  - name: Set Hostname
    hostname:
      name: k8s-master

  - name: Set up ansible hosts file (edit this as required)
    copy:
      content: |
        all:
          hosts:
            localhost:
              ansible_connection: local
              ip4addr: 192.168.50.10/24
              ip4gw: 192.168.50.1
          children:
            k8s_workers:
              hosts:
                k8s-worker1:
                  ansible_host: 100.123.35.2
                  ip4addr: 192.168.50.21/24
                  ip4gw: 192.168.50.1
                k8s-worker2:
                  ansible_host: 100.123.35.3
                  ip4addr: 192.168.50.22/24
                  ip4gw: 192.168.50.1
                k8s-worker3:
                  ansible_host: 100.123.35.4
                  ip4addr: 192.168.50.23/24
                  ip4gw: 192.168.50.1
              vars:
                ansible_password: Juniper!1
                ansible_user: jcluser
          vars:
            ip4route: 192.168.0.0/16
      dest: /etc/ansible/hosts

  - name: Set up netplan
    template:
      src: templates/01-bond0.yaml.j2
      dest: /etc/netplan/01-bond0.yaml
      backup: yes
    register: netplan

  - name: Apply netplan
    command: netplan apply
    when: netplan.changed

  - name: Load br_netfilter module
    modprobe:
      name: br_netfilter
      state: present

  - name: Load overlay module
    modprobe:
      name: overlay
      state: present

  - name: Check if /etc/modules-load.d/containerd.conf exists
    stat:
      path: /etc/modules-load.d/containerd.conf
    register: containerd_mods

  - name: Create /etc/modules-load.d/containerd.conf
    copy:
      content: |
        overlay
        br_netfilter
      dest: /etc/modules-load.d/containerd.conf
    when: not containerd_mods.stat.exists
    
  - name: Check if /etc/sysctl.d/99-kubernetes-cri.conf exists
    stat:
      path: /etc/sysctl.d/99-kubernetes-cri.conf
    register: kubernetes_cri_sysctl

  - name: Create /etc/sysctl.d/99-kubernetes-cri.conf
    copy:
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.ipv4.ip_forward                 = 1
        net.bridge.bridge-nf-call-ip6tables = 1
      dest: /etc/sysctl.d/99-kubernetes-cri.conf
    when: not kubernetes_cri_sysctl.stat.exists
    register: create_kubernetes_cri_sysctl

  - name: Apply sysctl settings
    command: sysctl --system
    when: create_kubernetes_cri_sysctl.changed

  - name: Update hostsfile
    replace:
      path: /etc/hosts
      regexp: '(\s+)ubuntu(\s+.*)?$'
      replace: '\1k8s-master\2'

  - name: Install packages
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
      - containerd

  - name: Check if /etc/containerd/config.toml exists
    stat:
      path: /etc/containerd/config.toml
    register: containerd_config

  - name: Create /etc/containerd/config.toml and restart
    shell: |
      mkdir -p /etc/containerd &&
      containerd config default | tee /etc/containerd/config.toml &&
      systemctl restart containerd
    when: not containerd_config.stat.exists
    args:
      warn: false

  - name: Install sshpass for demo environment
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: 
    vars:
      packages:
      - sshpass

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.25.2-00 
        - kubeadm=1.25.2-00
        - kubectl=1.25.2-00
  
  - name: Hold kubelet
    dpkg_selections:
      name: kubelet
      selection: hold
  
  - name: Hold kubeadm
    dpkg_selections:
      name: kubeadm
      selection: hold

  - name: Hold kubectl
    dpkg_selections:
      name: kubectl
      selection: hold

  - name: Check if kubelet is running
    command: pgrep kubelet
    register: kubelet_status

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --pod-network-cidr=192.168.0.0/16
    when: kubelet_status.rc != 0

  - name: Setup kubeconfig
    command: "{{ item }}"
    with_items:
     - mkdir -p /home/jcluser/.kube
     - cp -i /etc/kubernetes/admin.conf /home/jcluser/.kube/config
     - chown -R jcluser:jcluser /home/jcluser/.kube
    args:
      warn: false

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"